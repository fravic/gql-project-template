/* tslint:disable */
import { GraphQLResolveInfo } from "graphql";
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  chart?: GQLChart;
}

export interface GQLChart extends GQLNode {
  id: string;
  slug: string;
  name?: string;
  yAxisName?: string;
  dataPoints?: Array<GQLDataPoint>;
}

export interface GQLNode {
  id: string;
}

/** Use this to resolve interface type Node */
export type GQLPossibleNodeTypeNames = "Chart" | "DataPoint";

export interface GQLNodeNameMap {
  Node: GQLNode;
  Chart: GQLChart;
  DataPoint: GQLDataPoint;
}

export interface GQLDataPoint extends GQLNode {
  id: string;
  dateTime: string;
  value: number;
}

export interface GQLMutation {
  addDataToChart?: GQLChart;
  createChart?: GQLChart;
  renameChart?: GQLChart;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Chart?: GQLChartTypeResolver;
  Node?: {
    __resolveType: GQLNodeTypeResolver;
  };

  DataPoint?: GQLDataPointTypeResolver;
  Mutation?: GQLMutationTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  chart?: QueryToChartResolver<TParent>;
}

export interface QueryToChartArgs {
  chartSlug: string;
}
export interface QueryToChartResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToChartArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface GQLChartTypeResolver<TParent = any> {
  id?: ChartToIdResolver<TParent>;
  slug?: ChartToSlugResolver<TParent>;
  name?: ChartToNameResolver<TParent>;
  yAxisName?: ChartToYAxisNameResolver<TParent>;
  dataPoints?: ChartToDataPointsResolver<TParent>;
}

export interface ChartToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChartToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChartToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChartToYAxisNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ChartToDataPointsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo):
    | "Chart"
    | "DataPoint";
}
export interface GQLDataPointTypeResolver<TParent = any> {
  id?: DataPointToIdResolver<TParent>;
  dateTime?: DataPointToDateTimeResolver<TParent>;
  value?: DataPointToValueResolver<TParent>;
}

export interface DataPointToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataPointToDateTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DataPointToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  addDataToChart?: MutationToAddDataToChartResolver<TParent>;
  createChart?: MutationToCreateChartResolver<TParent>;
  renameChart?: MutationToRenameChartResolver<TParent>;
}

export interface MutationToAddDataToChartArgs {
  chartSlug: string;
  value: number;
  dateTime: string;
}
export interface MutationToAddDataToChartResolver<
  TParent = any,
  TResult = any
> {
  (
    parent: TParent,
    args: MutationToAddDataToChartArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreateChartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRenameChartArgs {
  chartSlug: string;
  chartName: string;
}
export interface MutationToRenameChartResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToRenameChartArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}
